#!/usr/bin/env bash

#
# Pre-commit Tools for Acquia Cloud projects.
#
# Downloads and configures tools that help standardise developer workflow. This
# script should be added to the root directory of a project and should be
# committed to the project to allow developers to quickly get setup.
#
# @see https://github.com/steveworley/pre-commit-tools
#

# CONFIGURAITON:
# -------------------------------------------
UPSTREAM=master
HOOKS=(code-review.sh tests.sh)
# -------------------------------------------

# Determine the root directory of the git repository.
ROOT="$( cd "$( git rev-parse --show-cdup )" && pwd )"

# Test if the setup.lock file exists and abort.
if [ -f "$ROOT/setup.lock" ]; then
  echo "Setup has been run"
  exit 0
fi

# Fetch composer.json from a GIST.
function fetch_composer_json() {
  echo "Fetching composer.json"
  wget -O $1/composer.json https://gist.githubusercontent.com/steveworley/5b901e7397327635b230fc62b98af0d5/raw/49995b34f88b51083f0d4dd37c96d356c8ac70a5/composer.json
}

# Test to see if the directory structure matches the Acquia Cloud expectation.
if [ ! -d "$ROOT/docroot" ]; then
  echo "Unable to locate Drupal. This needs to be run from an Acquia directory configuration."
  exit 1
fi

# If the UPSTREAM has been passed in to the script we should update the script
# so that subsequent runs will install with the correct UPSTREAM.
if [ $1 ] && [ "$UPSTREAM" == "master" ]; then
  ME=`basename "$0"`
  UPSTREAM=$1
  sed -i '' -e "15s|UPSTREAM=master|UPSTREAM=$UPSTREAM|g" "$ROOT/$ME"
fi;

# Test php is available (should be if terminal is opened with DD)
php -v > /dev/null 2>&1
PHP_IS_INSTALLED=$?

if [ $PHP_IS_INSTALLED -ne 0 ]; then
  echo "Unable to find PHP. Please run from terminal with php on path"
  exit 1
fi

# Test to see if composer.json has been downloaded.
if [ ! -f "$ROOT/composer.json" ] || [ ! -s "$ROOT/composer.json" ]; then
  fetch_composer_json $ROOT
fi

# Update the gitignore.
IGNORE_VENDOR="vendor"
IGNORE_COMPOSER="composer.phar"
IGNORE_LOCK="setup.lock"
echo "" >> "$ROOT/.gitignore"
echo "$IGNORE_VENDOR" >> "$ROOT/.gitignore"
echo "$IGNORE_COMPOSER" >> "$ROOT/.gitignore"
echo "$IGNORE_LOCK" >> "$ROOT/.gitignore"

# Test if Composer is installed
if [ ! -f "$ROOT/composer.phar" ]; then
  echo "Installing composer..."
  curl -sS https://getcomposer.org/installer | php;
fi

# Test if Composer is installed
$ROOT/composer.phar -v > /dev/null 2>&1
COMPOSER_IS_INSTALLED=$?

if [ $COMPOSER_IS_INSTALLED -ne 0 ]; then
  # Composer could not be installed... prompt to install manually and retry.
  echo "Unable to install Composer. Make sure composer.phar is available from project root."
  exit 1
fi

# Test to see if dependencies have been installed.
if [ ! -d "$ROOT/vendor" ]; then
  echo "Installing dependencies..."
  $ROOT/composer.phar install

  # Register Drupal CS standards.
  PHPCS="$ROOT/vendor/bin/phpcs"
  $PHPCS --config-set installed_paths $ROOT/vendor/drupal/coder/coder_sniffer
fi

# Fetch git hooks.
if [ ! -f $ROOT/.git/hooks/pre-commit ]; then
  echo "Setting up git hooks..."

  # Fetch the pre-commit bootstrap script and set permissions.
  wget -O $ROOT/.git/hooks/pre-commit https://raw.githubusercontent.com/steveworley/pre-commit-tools/master/pre-commit
  sed -i '' -e "s|UPSTREAM=master|UPSTREAM=$UPSTREAM|g" "$ROOT/.git/hooks/pre-commit"
  chmod +x $ROOT/.git/hooks/pre-commit

  mkdir $ROOT/.git/hooks/tasks

  # List of commands that we want to include as hooks to run for this project
  GIT_URL=https://raw.githubusercontent.com/steveworley/pre-commit-tools/master/tasks
  for hook in ${HOOKS[@]}
  do
    wget -O "$ROOT/.git/hooks/tasks/$hook" "$GIT_URL/$hook"
  done
fi

# Complete!
echo "Setup has finished."
touch $ROOT/setup.lock
exit 0
